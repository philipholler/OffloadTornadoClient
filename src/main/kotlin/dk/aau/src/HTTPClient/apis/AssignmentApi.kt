/**
 * Offloading
 * Semester project for 7th semester at Aalborg University
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.Assignment
import io.swagger.client.models.DeviceId
import io.swagger.client.models.UserCredentials

import io.swagger.client.infrastructure.*

class AssignmentApi(basePath: kotlin.String = "http://localhost:8080") : ApiClient(basePath) {

    /**
     * 
     * Returns a job for the device to process
     * @param userCredentials User authentication 
     * @param deviceId Identification for device 
     * @return Assignment
     */
    @Suppress("UNCHECKED_CAST")
    fun getJobForDevice(userCredentials: UserCredentials, deviceId: DeviceId): Assignment {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/assignments/{userCredentials}/{deviceId}".replace("{" + "userCredentials" + "}", "$userCredentials").replace("{" + "deviceId" + "}", "$deviceId")
        )
        val response = request<Assignment>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Assignment
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Quits the current assignment
     * @param userCredentials User authentication from worker 
     * @param deviceId Identification for device 
     * @param jobId Job to quit 
     * @return void
     */
    fun quitAssignment(userCredentials: UserCredentials, deviceId: DeviceId, jobId: kotlin.Long): Unit {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/assignments/{userCredentials}/{deviceId}/{jobId}".replace("{" + "userCredentials" + "}", "$userCredentials").replace("{" + "deviceId" + "}", "$deviceId").replace("{" + "jobId" + "}", "$jobId")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * Uploads the result
     * @param userCredentials User authentication from worker 
     * @param deviceId Identification for device 
     * @param jobId Job upload result for 
     * @param result  (optional)
     * @return void
     */
    fun uploadJobResult(userCredentials: UserCredentials, deviceId: DeviceId, jobId: kotlin.Long, result: kotlin.Array<kotlin.Byte>? = null): Unit {
        val localVariableBody: kotlin.Any? = mapOf("result" to "$result")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/assignments/{userCredentials}/{deviceId}/{jobId}".replace("{" + "userCredentials" + "}", "$userCredentials").replace("{" + "deviceId" + "}", "$deviceId").replace("{" + "jobId" + "}", "$jobId"), headers = localVariableHeaders
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
